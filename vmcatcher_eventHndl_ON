#!/usr/bin/python
# USAGE: python vmcatcher_eventHndlExpl --output_file=foo.tmp --datetime
import sys
if sys.version_info < (2, 4):
    print "Your python interpreter is too old. Please consider upgrading."
    sys.exit(1)

import os
import logging
import optparse
import hashlib
try:
    import simplejson as json
except:
    import json
import time
import datetime
from xml.dom import Node
from xml.dom import minidom
from string import Template
import commands
import tarfile
import fnmatch
import shutil


time_format_definition = "%Y-%m-%dT%H:%M:%SZ"


EnvEvent = set(['VMCATCHER_EVENT_TYPE',
    'VMCATCHER_EVENT_DC_DESCRIPTION',
    'VMCATCHER_EVENT_DC_IDENTIFIER',
    'VMCATCHER_EVENT_DC_TITLE',
    'VMCATCHER_EVENT_HV_HYPERVISOR',
    'VMCATCHER_EVENT_HV_SIZE',
    'VMCATCHER_EVENT_HV_URI',
    'VMCATCHER_EVENT_HV_FORMAT',
    'VMCATCHER_EVENT_HV_VERSION',
    'VMCATCHER_EVENT_SL_ARCH',
    'VMCATCHER_EVENT_SL_CHECKSUM_SHA512',
    'VMCATCHER_EVENT_SL_COMMENTS',
    'VMCATCHER_EVENT_SL_OS',
    'VMCATCHER_EVENT_SL_OSVERSION',
    'VMCATCHER_EVENT_TYPE',
    'VMCATCHER_EVENT_IL_DC_IDENTIFIER',
    'VMCATCHER_EVENT_FILENAME'])
    
EnvConf = set(['VMCATCHER_RDBMS',
    'VMCATCHER_CACHE_EVENT',
    'VMCATCHER_LOG_CONF',
    'VMCATCHER_DIR_CERT',
    'VMCATCHER_CACHE_DIR_CACHE',
    'VMCATCHER_CACHE_DIR_DOWNLOAD',
    'VMCATCHER_CACHE_DIR_EXPIRE',
    'VMCATCHER_CACHE_ACTION_DOWNLOAD',
    'VMCATCHER_CACHE_ACTION_CHECK',
    'VMCATCHER_CACHE_ACTION_EXPIRE'])

def generateEnvDict(enviromentDict = os.environ):
    FoundEnviroment = {}
    EnvConfInteresting = EnvEvent.union(EnvConf)
    for key in EnvConfInteresting:
        if key in enviromentDict.keys():
            FoundEnviroment[key] = enviromentDict[key]
    return FoundEnviroment

def nullEnvDict(enviromentDict = generateEnvDict(),NullValue = ""):
    FoundEnviroment = enviromentDict.copy()
    enviromentKeysSet = set(FoundEnviroment.keys())
    EnvConfInteresting = EnvEvent.union(EnvConf)
    missing = EnvConfInteresting.difference(enviromentKeysSet)
    for item in missing:
        FoundEnviroment[item] = NullValue
    return FoundEnviroment
  
def getExpiredId(xmldoc,vmcatcherId):
    for node in xmldoc.getElementsByTagName("IMAGE"):
        idList = node.getElementsByTagName("ID")
        for id in idList:
            imageId = id.toxml().replace('<ID>','').replace('</ID>','')
        template = node.getElementsByTagName("TEMPLATE")
        for t in template:
            catcherId = t.getElementsByTagName("VMCATCHER_EVENT_DC_IDENTIFIER")
            for cId in catcherId:
                catcherId = cId.toxml().replace('<VMCATCHER_EVENT_DC_IDENTIFIER>','').replace('</VMCATCHER_EVENT_DC_IDENTIFIER>','').replace('<![CDATA[','').replace(']]>','')
                if catcherId == vmcatcherId:
                    return imageId    

def UntarFile(imageFile,log,extractTarPath):
    # open the tar file
    tfile = tarfile.open(imageFile)

    if tarfile.is_tarfile(imageFile):
        # imageFile could be for example: /srv/grid_emc/ubuntu_ova/ubuntu_12.ova
        log.info("%s is an OVA file. Extracting files..." % (imageFile))
        # extract all OVA contents
        tfile.extractall(extractTarPath)
        tfile.close()

        ##image_patterns = ['*.vmdk', '*.vdi', '*.raw', '*.img', '*.qcow']
        image_patterns = ['*disk1.vmdk', '*disk1.vdi', '*disk1.raw', '*disk1.img', '*disk1.qcow']
        # We force to take disk1 in case the image have two disks as for example: cernvm.x86_64-disk1.vmdk and cernvm.x86_64-disk2.vmdk
        # where file are the files extracted from the OVA image, for example ubuntu_12-disk1.vmdk
        for file in os.listdir(extractTarPath):
            for p in image_patterns:
                if fnmatch.fnmatch(file, p):
                    imageFileInRawFormat = "%s/%s" % (extractTarPath,file)
                    # imageFileInRawFormat = for example: /home/vmcatcher_cache/templates/a1e2ec9c-3f2b-4c11-8723-2928cda5ccd9/ubuntu_12-disk1.vmdk 
        # Convert OVF image to RAW
        command = "qemu-img info %s &> /dev/null" % (imageFileInRawFormat)
        if os.system(command) == 0:
            log.info("Converting %s to raw format." % (imageFileInRawFormat))
            ## command = "qemu-img convert -O qcow2 %s %s.qcow2" % (imageFileInRawFormat,imageFileInRawFormat)
            command = "qemu-img convert -O raw %s %s.raw" % (imageFileInRawFormat,imageFileInRawFormat)
            # command = for example: 
            ## qemu-img convert -O raw /home/vmcatcher_cache/templates/a1e2ec9c-3f2b-4c11-8723-2928cda5ccd9/ubuntu_12-disk1.vmdk /home/vmcatcher_cache/templates/a1e2ec9c.../ubuntu_12-disk1.vmdk.raw
            ## At first, we converted the image in qcow, but we observed that the DOM-0 needed a recent version of qemu tool to run correctly the image, so we decided to convert the image better in raw format.
            if os.system(command) == 0:
                # imageFileRawFormat is the OVA image converted in raw
                imageFileInRawFormat = "%s.raw" % (imageFileInRawFormat)
                log.info("New QCOW2 image created: %s" % (imageFileInRawFormat))
                return imageFileInRawFormat
            else:
                log.error("qemu-img is not installed or this version does not support %s format. Please install a new qemu-img version" % (imageFile))
                # In this case we will include the original OVA file into ON datastore as it is
        else:
            log.error("qemu-img is not installed or this version does not support %s format. Please install a new qemu-img version" % (imageFile))
            # In this case we will include the original OVA file into ON datastore as it is
    else:
        log.error("%s is not a tarfile." % (imageFile))
        tfile.close()

def HandleAvailablePostfix(generator):
    log = logging.getLogger("HandelAvailablePostfix")
    # where vmcatcher_cache_dir=/home/vmcatcher_cache and vmcatcher_dc_identifier is the ID for the VM
    vmcatcher_cache_dir = generator['VMCATCHER_CACHE_DIR_CACHE']
    vmcatcher_dc_identifier = generator['VMCATCHER_EVENT_DC_IDENTIFIER']
    imageFile = "%s/%s" % (vmcatcher_cache_dir,vmcatcher_dc_identifier)

    ## detect if ON templates directory exists
    ## where VMCATCHER_CACHE_DIR_CACHE=/home/vmcatcher_cache
    if not os.path.exists("%s/templates" % (vmcatcher_cache_dir)):
        os.makedirs("%s/templates" % (vmcatcher_cache_dir))
        log.info("Templates dir doesn't exist, creating")

    # Detect OVA files
    imgFormat = generator['VMCATCHER_EVENT_HV_FORMAT']
    ## It also could be defined on the following way: if imgFormat == 'OVA' or imgFormat == 'ova':
    if imgFormat in ('OVA', 'ova'):
        extractTarPath = "%s/templates/%s" % (vmcatcher_cache_dir,vmcatcher_dc_identifier)
        os.makedirs(extractTarPath)
        # UntarFile function returns the image extracted/converted in qcow format, for example: /var/lib/one/pruebas_esfreire/ubuntu_12-disk1.vmdk.qcow2
        imageFileRawFormat = UntarFile(imageFile,log,extractTarPath)
        # We update the content of imageFile variable with the image converted in qcow format, otherwise, its pointing to the OVA image, for example: /srv/grid_emc/ubuntu_ova/ubuntu_12.ova
        imageFile = imageFileRawFormat
    ## Creating an OpenNebula template file for uploading the image to OpenNebula - %s = string variable1
    ## Example: vmcatcher_cache_dir=/home/vmcatcher_cache and vmcatcher_dc_identifier is the ID for the VM - /home/vmcatcher_cache/templates/a1e2ec9c-3f2b-4c11-8723-2928cda5ccd9
    templateFile = "%s/templates/%s.one" % (vmcatcher_cache_dir,vmcatcher_dc_identifier)
    ## Where vmcatcher_dc_title is the name for the original image to be uploaded to the OpenNebula infrastructure, for example: ubuntu12.04
    ## vmcatcher_dc_title = generator['VMCATCHER_EVENT_DC_TITLE']
    ## numerical_date is similar to this output 1399279181.07
    ## numerical_date = str(time.time())
    ## name = "%s %s %s" % (vmcatcher_dc_title,numerical_date,vmcatcher_dc_identifier)
    name = "%s" % (vmcatcher_dc_identifier)
    log.info("Creating template file %s" % (templateFile))
    try:
        with open(templateFile, "w") as tfile:
            tfile.write('NAME = "%s"\n' % (name))
            tfile.write('PATH = "%s"\n' % (imageFile))
            tfile.write('TYPE = "OS"\n')
            tfile.write('DESCRIPTION = "%s"\n' % (generator['VMCATCHER_EVENT_DC_DESCRIPTION']))
            tfile.write('VMCATCHER_EVENT_DC_IDENTIFIER = "%s"\n' % (generator['VMCATCHER_EVENT_DC_IDENTIFIER']))
            tfile.write('VMCATCHER_EVENT_DC_DESCRIPTION = "%s"\n' % (generator['VMCATCHER_EVENT_DC_DESCRIPTION']))
            tfile.write('VMCATCHER_EVENT_DC_TITLE = "%s"\n' % (generator['VMCATCHER_EVENT_DC_TITLE']))
            tfile.write('VMCATCHER_EVENT_HV_HYPERVISOR = "%s"\n' % (generator['VMCATCHER_EVENT_HV_HYPERVISOR']))
            tfile.write('VMCATCHER_EVENT_HV_SIZE = "%s"\n' % (generator['VMCATCHER_EVENT_HV_SIZE']))
            tfile.write('VMCATCHER_EVENT_HV_URI = "%s"\n' % (generator['VMCATCHER_EVENT_HV_URI']))
            tfile.write('VMCATCHER_EVENT_HV_FORMAT = "%s"\n' % (generator['VMCATCHER_EVENT_HV_FORMAT']))
            tfile.write('VMCATCHER_EVENT_HV_VERSION = "%s"\n' % (generator['VMCATCHER_EVENT_HV_VERSION']))
            tfile.write('VMCATCHER_EVENT_SL_ARCH = "%s"\n' % (generator['VMCATCHER_EVENT_SL_ARCH']))
            tfile.write('VMCATCHER_EVENT_SL_CHECKSUM_SHA512 = "%s"\n' % (generator['VMCATCHER_EVENT_SL_CHECKSUM_SHA512']))
            tfile.write('VMCATCHER_EVENT_SL_COMMENTS = "%s"\n' % (generator['VMCATCHER_EVENT_SL_COMMENTS']))
            tfile.write('VMCATCHER_EVENT_SL_OS = "%s"\n' % (generator['VMCATCHER_EVENT_SL_OS']))
            tfile.write('VMCATCHER_EVENT_SL_OSVERSION = "%s"\n' % (generator['VMCATCHER_EVENT_SL_OSVERSION']))
            tfile.write('VMCATCHER_EVENT_TYPE = "%s"\n' % (generator['VMCATCHER_EVENT_TYPE']))
            tfile.write('VMCATCHER_EVENT_IL_DC_IDENTIFIER = "%s"\n' % (generator['VMCATCHER_EVENT_IL_DC_IDENTIFIER']))
            tfile.write('VMCATCHER_EVENT_FILENAME = "%s"\n' % (generator['VMCATCHER_EVENT_FILENAME']))
            tfile.close()

    except IOError:
        log.error("It was not possible to create the following image template to upload the image to OpenNebula: %s" % (templateFile))
        sys.exit(2)

    ## execute image template to be included into ON - Upload the image to the OpenNebula infrastructure
    command = "oneimage create -d default %s" % (templateFile)
    log.info("Instantiating template: %s" % (command))
    os.system(command) 
    # In a future, we could delete the temporary files where we extract the OVA files 
    #try:
    #    extractTarPath
    #    shutil.rmtree(extractTarPath)
    #except NameError:
    #    log.info("OVA directory is not defined.")


def HandleExpirePostfix(generator):
    log = logging.getLogger("HandleExpirePostfix")
    ON_IMAGE_ID = -1
    command = "oneimage list --xml"
    status, result = commands.getstatusoutput(command)
    log.info("Getting image list: %s" % (command))
    xmldoc = minidom.parseString(result)
    vmcatcher_dc_identifier = generator['VMCATCHER_EVENT_DC_IDENTIFIER'] 
    ## ON_IMAGE_ID = getExpiredId(xmldoc,generator['VMCATCHER_EVENT_DC_IDENTIFIER'])
    ON_IMAGE_ID = getExpiredId(xmldoc,vmcatcher_dc_identifier)
    if ON_IMAGE_ID != -1:
        # If we have execute an unsubscribe for the image or if there is a new version for this image, the vmcatcher_eventHndl_ON disable this image on the OpenNebula infrastructure
        command = "oneimage disable %s" % (ON_IMAGE_ID)
        log.info("Disabling image detected as expired: %s" % (command))
        os.system(command)
    log.info(json.dumps(generator))


def main():
    reload(sys)
    sys.setdefaultencoding('utf-8')
    log = logging.getLogger("main")
    p = optparse.OptionParser(version = "%prog " + "0.0.1")    
    p.add_option('--generator',  action ='store',help='Set the dictionary Generator.', metavar='minium')
    p.add_option('--verbose', action ='count',help='Change global log level, increasing log output.', metavar='LOGFILE')
    p.add_option('--quiet', action ='count',help='Change global log level, decreasing log output.', metavar='LOGFILE')
    p.add_option('--log-config', action ='store',help='Logfile configuration file, (overrides command line).', metavar='LOGFILE')
    p.add_option('--logcfg', action ='store',help='Logfile configuration file.', metavar='LOGCFGFILE')
    
    options, arguments = p.parse_args()
    if options.logcfg:
        if os.path.isfile(str(options.logfile)):
            logging.config.fileConfig(options.logfile)
        else:
            logging.basicConfig(level=logging.INFO)
            log = logging.getLogger("main")
            log.error("Logfile configuration file '%s' was not found." % (options.logfile))
            sys.exit(1)
    else:
        logging.basicConfig(level=logging.INFO)    
    outputDict = None
    generator = nullEnvDict()
    logFile = None
    
    if 'VMCHNDL_ON_LOG_CONF' in os.environ:
        logFile = os.environ['VMCHNDL_ON_LOG_CONF']
    
    # Set up log file
    LoggingLevel = logging.WARNING
    LoggingLevelCounter = 2
    if options.verbose:
        LoggingLevelCounter = LoggingLevelCounter - options.verbose
        if options.verbose == 1:
            LoggingLevel = logging.INFO
        if options.verbose == 2:
            LoggingLevel = logging.DEBUG
    if options.quiet:
        LoggingLevelCounter = LoggingLevelCounter + options.quiet
    if LoggingLevelCounter <= 0:
        LoggingLevel = logging.DEBUG
    if LoggingLevelCounter == 1:
        LoggingLevel = logging.INFO
    if LoggingLevelCounter == 2:
        LoggingLevel = logging.WARNING
    if LoggingLevelCounter == 3:
        LoggingLevel = logging.ERROR
    if LoggingLevelCounter == 4:
        LoggingLevel = logging.FATAL
    if LoggingLevelCounter >= 5:
        LoggingLevel = logging.CRITICAL
    
    if options.log_config:
        logFile = options.log_config
    if logFile != None:
        if os.path.isfile(str(options.log_config)):
            logging.config.fileConfig(options.log_config)
        else:
            logging.basicConfig(level=LoggingLevel)
            log = logging.getLogger("main")
            log.error("Logfile configuration file '%s' was not found." % (options.log_config))
            sys.exit(1)
    else:
        logging.basicConfig(level=LoggingLevel)
    log = logging.getLogger("main")

    caseDict = { 
            "AvailablePostfix" : HandleAvailablePostfix, 
            "ExpirePosfix" : HandleExpirePostfix, # Backward compatability 
            "ExpirePostfix" : HandleExpirePostfix # Forward compatability
        }
    ###print(generator['VMCATCHER_EVENT_TYPE'])
    if generator['VMCATCHER_EVENT_TYPE'] in caseDict.keys():
        hdlFunct = caseDict[generator['VMCATCHER_EVENT_TYPE']]
        hdlFunct(generator)
    else:
        log.debug("Ignoring event '%s'" % (generator['VMCATCHER_EVENT_TYPE']))


if __name__ == "__main__":
    main()
